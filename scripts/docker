#!/bin/bash

RED="\033[91m"
GREEN="\033[92m"
YELLOW="\033[93m"
GREY="\033[90m"
PURPLE="\033[95m"
ENDC="\033[0m"

DOCKER_PROJECT_NAME="lagom"

docker_wait_until_healthy_or_none(){
  local wait=${1}
  local total_wait=${2}

  if [[ "$wait" -ge "$total_wait" ]]; then
      echo "docker_wait ran out of time, exit 1"
      exit 1
  fi
  for starting in $(docker ps --filter health=starting -q); do
    sleep 10
    docker_wait_until_healthy_or_none $((wait+10)) $total_wait
  done

  for unhealthy in $(docker ps --filter health=unhealthy -q); do
    sleep 10
    docker_wait_until_healthy_or_none $((wait+10)) $total_wait
  done
  echo "docker_wait success"
}

docker_validate(){
  #containers exited
  exitedContainers=$(docker ps --filter status=exited -q)
  #containers exited with 0 exitcode (valid exit)
  validExitedContainers=$(docker ps --all --filter exited=0 -q)
  #if there is a diff between above it means one or more containers exited unhealthy
  if [[ "$exitedContainers" != "$validExitedContainers" ]]; then
      echo "docker_validate fail"
      exit 1
  fi
  echo "docker_validate success"
  create_grafana_dashboards
  exit 0
}

docker_compose_up() {
    stop_and_clean_docker_world
    prepare_config_files
    COMPOSE_HTTP_TIMEOUT=360 USERID=$(id -u):$(id -g) docker-compose -f docker-compose.yml --project-name ${DOCKER_PROJECT_NAME} up -d --build "$@"
    docker_wait_until_healthy_or_none 0 180
    docker ps -a
    for container in $(docker ps --filter status=exited -q); do
        echo "${container}"
        docker logs "${container}"
    done
    docker_validate
}

stop_and_clean_docker_world() {
    clear
    docker-compose -f docker-compose.yml --project-name ${DOCKER_PROJECT_NAME} down -v || true
    docker-compose -f docker-compose.yml --project-name ${DOCKER_PROJECT_NAME} rm --force || true
    docker stop $(docker ps -a -q) || true
    docker rm $(docker ps -a -q) || true
}

remove_container_if_exists() {
    local name=${1}
    if [ "$(docker ps -q -f name=${name})" ]; then
        #docker stop ${name}
        docker rm -f /${name}
    fi
}

create_grafana_dashboards() {
  sleep 20
  curl -v http://localhost:3000/api/dashboards/db -u admin:admin -H "Content-Type: application/json" -H "Accept: application/json" -d @../docker/grafana/dashboards/demo.json
}

prepare_config_files() {
    DOCKER_HOST=$(ifconfig | grep -E "([0-9]{1,3}\.){3}[0-9]{1,3}" | grep -v 127.0.0.1 | awk '{ print $2 }' | cut -f2 -d: | head -n1)
    sed -e "s/\${IP}/${DOCKER_HOST}/g" ./docker/prometheus/prometheus_template.yml > ./docker/prometheus/prometheus.yml
    sed -e "s/\${IP}/${DOCKER_HOST}/g" ./docker/grafana/datasources/datasources_template.yaml > ./docker/grafana/datasources/datasources.yaml
}

COMMAND=$1
shift
${COMMAND} $@